{"version":3,"sources":["components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["CardList","props","Row","Container","CardColumns","monsters","map","monster","Card","key","id","className","Img","variant","src","Header","name","Body","Text","email","toLowerCase","SearchBox","placeholder","handleChange","type","onChange","App","event","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","includes","toLocaleLowerCase","Col","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yvDAMaA,EAAW,SAACC,GACrB,OASI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KAEIH,EAAMI,SAASC,KAAI,SAAAC,GAAO,OACtB,kBAACC,EAAA,EAAD,CAAMC,IAAKF,EAAQG,GAAIC,UAAU,mBAC7B,kBAACH,EAAA,EAAKI,IAAN,CAAUC,QAAQ,MAAMC,IAAG,+BAA0BP,EAAQG,GAAlC,4BAC3B,kBAACF,EAAA,EAAKO,OAAN,KAAa,2BAAIR,EAAQS,OACzB,kBAACR,EAAA,EAAKS,KAAN,KACI,kBAACT,EAAA,EAAKU,KAAN,KAAYX,EAAQY,MAAMC,wB,SCR3CC,EAXG,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aAC9B,OACA,2BACAZ,UAAU,eACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,KCiECG,E,YApEb,aAAe,IAAD,8BACZ,+CA8BFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SA7B1C,EAAKC,MAAQ,CACX3B,SAAU,GACVwB,YAAa,IALH,E,iFAYO,IAAD,OAIlBI,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAEvB,SAAUgC,S,+BAiBpC,MAK2BC,KAAKN,MAA/B3B,EALD,EAKCA,SAAUwB,EALX,EAKWA,YAGZU,EAAmBlC,EAASmC,QAAO,SAAAjC,GAAO,OAC9CA,EAAQS,KAAKI,cAAcqB,SAASZ,EAAYa,wBAGlD,OACE,yBAAK/B,UAAU,OACb,kBAACT,EAAA,EAAD,CAAKS,UAAU,OACb,kBAACR,EAAA,EAAD,KACE,kBAACwC,EAAA,EAAD,KACA,wBAAIhC,UAAU,cAAd,qBAEA,kBAACgC,EAAA,EAAD,KACE,kBAAC,EAAD,CACErB,YAAY,kBACZC,aAAce,KAAKf,kBAK3B,kBAAC,EAAD,CAAUlB,SAAUkC,S,GAjEVK,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,kB","file":"static/js/main.292e193f.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card-list.styles.css';\r\nimport 'react-bootstrap';\r\nimport { Card, Container, Row, CardColumns } from 'react-bootstrap';\r\n\r\n//props include a property called children that is anything in between html tags\r\nexport const CardList = (props) => {\r\n    return (\r\n        /*<div className='card-list'>{props.children}</div>*/\r\n        /*<div className='card-list'>\r\n            {\r\n                props.monsters.map(monster => (\r\n                <h1 key={ monster.id }> { monster.name } </h1>\r\n                ))\r\n            }\r\n        </div>*/\r\n        <Row>\r\n            <Container>\r\n                <CardColumns>\r\n                {\r\n                    props.monsters.map(monster => (\r\n                        <Card key={monster.id} className='shadow bg-light'>\r\n                            <Card.Img variant='top' src={`https://robohash.org/${monster.id}?set=set2&size=180x180`}></Card.Img>\r\n                            <Card.Header><b>{monster.name}</b></Card.Header>\r\n                            <Card.Body>\r\n                                <Card.Text>{monster.email.toLowerCase()}</Card.Text>\r\n                            </Card.Body>\r\n                        </Card>\r\n                    ))\r\n                }\r\n                </CardColumns>\r\n            </Container>\r\n        </Row>\r\n    );\r\n}//End of card list","/* eslint-disable no-unused-expressions */\r\n//Functional component\r\n//Whn you dont need state and life cycle methods create a functional component\r\n\r\nimport React from 'react';\r\n\r\nconst SearchBox = ({ placeholder, handleChange}) => {\r\n    return(\r\n    <input \r\n    className='form-control'\r\n    type='search' \r\n    placeholder={placeholder}\r\n    onChange={handleChange}>\r\n    </input>\r\n    )\r\n};\r\n\r\nexport default SearchBox;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport { CardList } from './components/card-list/card-list.component';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport SearchBox from './components/search-box/search-box.component';\n\nclass App extends Component {\n\n  //runs first\n  constructor() {\n    super();//calls the constructor method of the component class\n\n    this.state = {\n      monsters: [],\n      searchField: ''\n    };//End of state\n\n    //this.handleChange = this.handleChange.bind(this);\n\n  } //End of constructor\n\n  componentDidMount() {\n    //fetch only reject on network failure or if anything prevented the request from completing\n    //fetch won't receive cross-site cookies, you can’t establish a cross site session\n    //fetch won’t send cookies unless you set the credentials init option\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({ monsters: users }))\n  } //End of componentDidMount\n\n  /*\n  handleChange(event){\n    this.setState({searchField: event.target.value})\n  }\n  */\n\n  //using ES6 arrow functions\n  //arrow functions allow to set this when handleChange is being defined\n  //where the arrow function was defined\n  //lexical scoping\n  handleChange = (event) => {\n    this.setState({ searchField: event.target.value })\n  }\n\n  render() {\n\n    //Desctructuring\n    //Pull property out of an object and set them to properties\n    //This is used to maintain the original datatset\n    const { monsters, searchField } = this.state;\n    //Filter\n    //Includes\n    const filteredMonsters = monsters.filter(monster => (\n      monster.name.toLowerCase().includes(searchField.toLocaleLowerCase())\n    ))\n\n    return (\n      <div className='App'>\n        <Row className='p-2'>\n          <Container>\n            <Col>\n            <h1 className='text-white'>Monsters Rolodex</h1>\n            </Col>\n            <Col>\n              <SearchBox\n                placeholder='search monsters'\n                handleChange={this.handleChange}>\n              </SearchBox>\n            </Col>\n          </Container>\n        </Row>\n        <CardList monsters={filteredMonsters}></CardList>\n      </div>\n    ); //End of return\n  } //End of render\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'core-js/stable';\nimport 'regenerator-runtime/runtime';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}